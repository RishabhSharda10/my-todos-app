{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/TodoForm.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","todo","deleteTodoMethod","setCompletedMethod","Grid","style","textAlign","flex","className","Completed","text","size","onChange","checked","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","onClick","id","MinusCircleOutlined","marginTop","fontSize","color","cursor","FormOutlined","TodoList","todos","map","index","TodoForm","Form","useForm","form","input","setInput","addTodoMethod","name","initialValues","remember","layout","onFinish","values","console","log","todoName","completed","resetFields","onFinishFailed","errorInfo","autoComplete","gutter","xs","sm","md","lg","xl","Item","wrapperCol","offset","span","rules","required","message","placeholder","event","target","value","type","htmlType","block","PlusCircleFilled","Title","Typography","Header","Layout","Footer","Content","App","settodos","useEffect","axios","get","then","response","data","align","justify","title","subTitle","newTodo","post","updatedTodos","todoID","delete","filter","background","position","bottom","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99e7979d.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport {Card,Layout,Switch,Space } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport '../App.css'\r\nimport { PlusCircleFilled, FormOutlined, MinusCircleOutlined,CloseOutlined, CheckOutlined } from '@ant-design/icons';\r\n\r\n\r\nfunction Todo(props) {\r\n\r\n    const [Edit, setEdit] = useState(false);\r\n    const {todo,deleteTodoMethod,setCompletedMethod} = props;\r\n\r\n\r\n     const onChangeCompleted = (checked) => {\r\n        \r\n        setCompletedMethod(todo);\r\n\r\n      }\r\n      \r\n\r\n\r\n    const gridStyle = {\r\n        textAlign: 'center',\r\n        flex:1\r\n      };\r\n      \r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Card.Grid  style={gridStyle} >\r\n            <Space>\r\n            <span className={todo.Completed ? \"strikeOut\" : \"\"}>{todo.text}</span>\r\n            <span><Switch size=\"small\" onChange={onChangeCompleted} checkedChildren={<CheckOutlined />} unCheckedChildren={<CloseOutlined />} /></span>\r\n            <span onClick={()=>deleteTodoMethod(todo.id)}><MinusCircleOutlined style={{marginTop:\"9px\",  fontSize: '18px', color: 'red', cursor:'pointer' }} /></span>\r\n            <span><FormOutlined style={{ marginTop:\"9px\", fontSize: '18px', color: 'gray', cursor:'pointer' }} /></span>\r\n            </Space>\r\n            </Card.Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo","import {Card} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport '../App.css'\r\n\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList(props) {\r\n\r\n\r\n\r\n const {todos,deleteTodoMethod} = props;\r\n\r\n    return (\r\n            <div>\r\n                {\r\n                    todos.map((todo,index)=>{\r\n                    \r\n                        return (\r\n                            <Todo deleteTodoMethod={deleteTodoMethod} todo={todo} key={index} />\r\n                        )\r\n                    \r\n                    })\r\n                }\r\n                \r\n            </div>\r\n    )\r\n }\r\n\r\nexport default TodoList;\r\n","import React,{useState,useRef} from 'react'\r\nimport 'antd/dist/antd.css';\r\nimport {Typography,Layout,Row,Col,Form, Input, Button, Checkbox,Space} from 'antd';\r\nimport { PlusCircleFilled} from '@ant-design/icons';\r\n\r\n\r\n\r\nfunction TodoForm(props) {\r\n    const [form] = Form.useForm();\r\n\r\n    const [input, setInput] = useState('');\r\n    const {addTodoMethod} = props;\r\n\r\n    const onChangeHandler = (event) =>{\r\n        setInput(event.target.value)\r\n        \r\n        \r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Success:', values.todoName);\r\n\r\n        addTodoMethod({\r\n            text:input,\r\n            completed:false\r\n\r\n\r\n        });\r\n        \r\n        setInput('') \r\n        form.resetFields();\r\n\r\n      };\r\n    \r\n      const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n      };\r\n\r\n\r\n    return (\r\n    <>\r\n        <Form\r\n            name=\"basic\"\r\n            form={form}\r\n            initialValues={{ remember: true }}\r\n            layout=\"horizontal\"            \r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n            layout=\"horizontal\"\r\n        >\r\n              <Row gutter={10}>\r\n\r\n                <Col xs={24} sm={24} md={12} lg={15} xl={15}>\r\n                    <Form.Item \r\n                        wrapperCol={{ offset: 8, span: 24 }}                \r\n                        name=\"todoName\"\r\n                        rules={[{ required: true, message: 'This feild is required' }]}\r\n                    >\r\n                        <Input name=\"content\" placeholder=\"What needs to be done?\" onChange={onChangeHandler} />\r\n                    </Form.Item>\r\n                </Col>\r\n                \r\n                <Col xs={24} sm={24} md={5} lg={5} xl={4}>\r\n                    <Form.Item >\r\n                        <Button type=\"primary\" htmlType=\"submit\" block>\r\n                        <PlusCircleFilled/>\r\n                        Add Todo\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n            \r\n    </>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, {useState,useEffect}  from 'react';\nimport Todolist from './components/TodoList';\nimport TodoForm from './components/TodoForm';\nimport axios from 'axios' \nimport {Typography,Layout,Row, Col, Card, PageHeader} from 'antd';\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nconst { Title } = Typography;\nconst { Header, Footer, Content } = Layout;\n\n\n\nfunction App() {\n\n  const [todos, settodos] = useState([]);\n\n  useEffect(() => {\n\n      axios.get('http://localhost:5000/todos/')\n        .then(function (response) {\n          settodos(response.data);\n        })\n\n\n    },[todos]);\n\n    \n\n    const setCompletedMethod = (deltodo) =>{\n\n\n      axios.put('http://localhost:5000/todos/'+deltodo.id+'/',{\n\n      })\n      .then(function (response) {\n  \n        const updatedTodos = todos.map((todo,index)=>{\n  \n          if  (deltodo.id ===deltodo.id ){\n\n            return \n\n          }\n          return todos;\n  \n        })\n\n  \n        settodos(updatedTodos);\n      });    \n  \n    }\n\n\n\n    const addTodoMethod = (newTodo) =>{\n\n\n\n    axios.post('http://localhost:5000/todos/',newTodo)\n    .then(function (response) {\n\n      const updatedTodos = [\n        ...todos,response.data\n  \n      ] \n      settodos(updatedTodos);\n    });    \n\n  }    \n\n  const deleteTodoMethod = (todoID) =>{\n\n\n\n    axios.delete('http://localhost:5000/todos/'+todoID+'/',)\n    .then(function (response) {\n\n      const updatedTodos = todos.filter((todo,index)=>{\n\n        return todo.id !== todoID;\n\n\n      }) \n\n      settodos(updatedTodos);\n    });    \n\n  }    \n\n\n  return (  \n    <>\n    <Layout>\n      <Header >\n        <Title align=\"center\"style={{color:\"#fff\"}}>My Todo App</Title>\n      </Header>\n      <Content>\n        <Row\n        justify=\"center\"\n        align=\"middle\"\n        gutter={[0, 20]}\n        className=\"todos-container\"\n      >\n        <Col\n          xs={{ span: 23 }}\n          sm={{ span: 23 }}\n          md={{ span: 21 }}\n          lg={{ span: 20 }}\n          xl={{ span: 18 }}\n        >\n          <PageHeader\n            title=\"Add Todo\"\n            subTitle=\"To add a todo, just fill the form below and click in add todo.\"\n          />\n        </Col>\n\n        <Col\n          xs={{ span: 23 }}\n          sm={{ span: 23 }}\n          md={{ span: 21 }}\n          lg={{ span: 20 }}\n          xl={{ span: 18 }}\n        >\n          <Card title=\"Create a new todo\">\n            <TodoForm addTodoMethod={addTodoMethod}/>\n          </Card>\n        </Col>\n\n        <Col\n          xs={{ span: 23 }}\n          sm={{ span: 23 }}\n          md={{ span: 21 }}\n          lg={{ span: 20 }}\n          xl={{ span: 18 }}\n        >\n          <Card title=\"Todo List\">\n            <Todolist deleteTodoMethod={deleteTodoMethod} todos={todos} />  \n          </Card>\n        </Col>\n      </Row>\n    \n      </Content>\n      \n      <Footer align=\"right\" style={{ background:\"azure\",position:\"fixed\", bottom:\"0px\", width:\"100%\", color:\"#000\"}}>\n      My Todo App ©2021 Created by Rishabh\n      </Footer>\n    </Layout>  \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}