{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/TodoForm.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","todo","deleteTodoMethod","setCurrentMethod","current","setCurrent","visible","setVisible","confirmLoading","setConfirmLoading","Step","Steps","text","title","onConfirm","setTimeout","id","okButtonProps","loading","onCancel","onClick","MinusCircleOutlined","style","fontSize","float","color","cursor","size","onChange","description","icon","ScheduleOutlined","TodoList","todos","justify","align","grid","gutter","xs","sm","md","lg","xl","xxl","className","map","index","Grid","TodoForm","Form","useForm","form","input","setInput","addTodoMethod","name","initialValues","remember","layout","onFinish","values","console","log","todoName","resetFields","onFinishFailed","errorInfo","autoComplete","Item","wrapperCol","offset","span","rules","required","message","placeholder","event","target","value","type","htmlType","block","PlusCircleFilled","Title","Typography","Header","Layout","Footer","Content","App","settodos","useEffect","axios","get","then","response","data","marginTop","level","newTodo","post","updatedTodos","newCurrrent","put","i","todoID","delete","filter","background","position","bottom","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97f7e00d.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport {Switch,Steps,Space,Popconfirm,Divider  } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport '../App.css'\r\nimport { ScheduleOutlined, MinusCircleOutlined,CloseOutlined, CheckOutlined } from '@ant-design/icons';\r\n\r\n\r\nfunction Todo(props) {\r\n\r\n\r\n    const [Edit, setEdit] = useState(false);\r\n    const {todo,deleteTodoMethod,setCurrentMethod} = props;\r\n    const [current, setCurrent] = useState(todo.current);\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const { Step } = Steps;\r\n\r\n\r\n    const handleOk = () => {\r\n      setConfirmLoading(true);\r\n      setTimeout(() => {\r\n      setVisible(false);\r\n      setConfirmLoading(false);\r\n      deleteTodoMethod(todo.id)\r\n      }, 1000);\r\n    };\r\n\r\n    const onChangeStep = current => {\r\n      setCurrent(current);\r\n      setCurrentMethod(todo,current);\r\n\r\n\r\n    };\r\n  \r\n    const handleCancel = () => {\r\n      setVisible(false);\r\n    };\r\n\r\n\r\n\r\n      const showPopconfirm = () => {\r\n        setVisible(true);\r\n      };\r\n    \r\n      \r\n\r\n    return (\r\n        <>\r\n\r\n            <Space>\r\n              <span>{todo.text}</span>\r\n              {/* <span>\r\n                <Switch size=\"small\" defaultChecked={todo.completed ? true : false}  onChange={onChangeCompleted} checkedChildren={<CheckOutlined />} unCheckedChildren={<CloseOutlined />} />\r\n              </span> */}\r\n              <Popconfirm  title=\"Title\"\r\n                visible={visible}\r\n                onConfirm={handleOk}\r\n                okButtonProps={{ loading: confirmLoading }}\r\n                onCancel={handleCancel}\r\n                title=\"Are you sureï¼Ÿ\" okText=\"Yes\" cancelText=\"No\">\r\n                <span onClick={showPopconfirm}>\r\n                  <MinusCircleOutlined style={{  fontSize: '18px', float:\"right\", color: 'red', cursor:'pointer' }} />\r\n                </span>\r\n              </Popconfirm>\r\n\r\n            </Space>\r\n\r\n            <Divider/>\r\n            <Steps  current={current} size=\"small\" onChange={onChangeStep}  >\r\n              <Step title=\"Waiting\" description=\"\"  />\r\n              <Step title=\"In Progress\" description=\"\"  />\r\n              <Step title=\"Finished\" description=\"\" icon={<ScheduleOutlined />}/>\r\n            </Steps>            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo","import {Card,List} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport '../App.css'\r\n\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList(props) {\r\n\r\n\r\n\r\n const {todos,deleteTodoMethod,setCurrentMethod } = props;\r\n\r\n    return (\r\n            <>\r\n                 <Card \r\n                   justify=\"center\"\r\n                   align=\"middle\"\r\n                   grid={{\r\n                    gutter: 16,\r\n                    xs: 1,\r\n                    sm: 2,\r\n                    md: 4,\r\n                    lg: 4,\r\n                    xl: 6,\r\n                    xxl: 3,\r\n                  }}\r\n                   className=\"\">\r\n                {\r\n                   \r\n                        todos.map((todo,index)=>{\r\n\r\n                            return (\r\n                                <Card.Grid key={index} >                                \r\n                                <Todo setCurrentMethod={setCurrentMethod} deleteTodoMethod={deleteTodoMethod} todo={todo}  />\r\n                                </Card.Grid>\r\n                            )\r\n                            \r\n                        \r\n                        })\r\n                                  \r\n                }\r\n                </Card>  \r\n                \r\n            </>\r\n    )\r\n }\r\n\r\nexport default TodoList;\r\n","import React,{useState,useRef} from 'react'\r\nimport 'antd/dist/antd.css';\r\nimport {Typography,Layout,Row,Col,Form, Input, Button, Checkbox,Space} from 'antd';\r\nimport { PlusCircleFilled} from '@ant-design/icons';\r\n\r\n\r\n\r\nfunction TodoForm(props) {\r\n    const [form] = Form.useForm();\r\n\r\n    const [input, setInput] = useState('');\r\n    const {addTodoMethod} = props;\r\n\r\n    const onChangeHandler = (event) =>{\r\n        setInput(event.target.value)\r\n        \r\n        \r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Success:', values.todoName);\r\n\r\n        addTodoMethod({\r\n            text:input,\r\n            current:0,\r\n\r\n\r\n\r\n        });\r\n        \r\n        setInput('') \r\n        form.resetFields();\r\n\r\n      };\r\n    \r\n      const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n      };\r\n\r\n\r\n    return (\r\n    <>\r\n        <Form\r\n            name=\"basic\"\r\n            form={form}\r\n            initialValues={{ remember: true }}\r\n            layout=\"horizontal\"            \r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n            layout=\"horizontal\"\r\n        >\r\n              <Row gutter={10}>\r\n\r\n                <Col xs={24} sm={24} md={12} lg={15} xl={15}>\r\n                    <Form.Item \r\n                        wrapperCol={{ offset: 8, span: 24 }}                \r\n                        name=\"todoName\"\r\n                        rules={[{ required: true, message: 'This feild is required' }]}\r\n                    >\r\n                        <Input name=\"content\" placeholder=\"What needs to be done?\" onChange={onChangeHandler} />\r\n                    </Form.Item>\r\n                </Col>\r\n                \r\n                <Col xs={24} sm={24} md={5} lg={5} xl={4}>\r\n                    <Form.Item >\r\n                        <Button type=\"primary\" htmlType=\"submit\" block>\r\n                        <PlusCircleFilled/>\r\n                        Add Todo\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n            \r\n    </>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, {useState,useEffect}  from 'react';\nimport Todolist from './components/TodoList';\nimport TodoForm from './components/TodoForm';\nimport axios from 'axios' \nimport {Typography,Layout,Row, Col, Card, PageHeader} from 'antd';\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nconst { Title } = Typography;\nconst { Header, Footer, Content } = Layout;\n\n\n\nfunction App() {\n\n  const [todos, settodos] = useState([]);\n\n  useEffect(() => {\n\n      axios.get('https://6163510bb55edc00175c1a3a.mockapi.io/Todos')\n        .then(function (response) {\n          settodos(response.data);\n        })\n\n\n    },[todos]);\n\n    \n\n    const setCurrentMethod = (newTodo,newCurrrent) =>{\n\n      axios.put('https://6163510bb55edc00175c1a3a.mockapi.io/api/rishabh/Todos/'+newTodo.id+'/',{...newTodo,\n      current: newCurrrent\n      })\n      .then(function (response) {\n  \n        const updatedTodos = todos.map((todo,i)=>{\n  \n          if  (todo.id === newTodo.id){\n  \n            return {\n              ...todo,\n              current: newCurrrent\n  \n            };\n  \n  \n          }\n  \n          return todo;\n  \n        });\n        \n\n        settodos(updatedTodos);\n      });    \n  \n    }\n\n\n\n    const addTodoMethod = (newTodo) =>{\n\n\n\n    axios.post('https://6163510bb55edc00175c1a3a.mockapi.io/api/rishabh/Todos/',newTodo)\n    .then(function (response) {\n\n      const updatedTodos = [\n        ...todos,response.data\n  \n      ] \n      settodos(updatedTodos);\n    });    \n\n  }    \n\n  const deleteTodoMethod = (todoID) =>{\n\n\n\n    axios.delete('https://6163510bb55edc00175c1a3a.mockapi.io/api/rishabh/Todos/'+todoID+'/',)\n    .then(function (response) {\n\n      const updatedTodos = todos.filter((todo,index)=>{\n\n        return todo.id !== todoID;\n\n\n      }) \n\n      settodos(updatedTodos);\n    });    \n\n  }    \n\n\n  return (  \n    <>\n    <Layout>\n      <Header >\n        <Title align=\"center\"style={{color:\"#fff\"}}>My Todo App</Title>\n      </Header>\n      <Content>\n        <Row\n        justify=\"center\"\n        align=\"middle\"\n        gutter={[0, 20]}\n        className=\"todos-container\"\n      >\n     \n\n        <Col\n          xs={{ span: 23 }}\n          sm={{ span: 23 }}\n          md={{ span: 21 }}\n          lg={{ span: 20 }}\n          xl={{ span: 18 }}\n        >\n          <Card style={{marginTop:\"50px\"}}>\n          <Title level={2} align=\"center\"style={{color:\"#000\"}}>Todo list</Title>\n            <TodoForm addTodoMethod={addTodoMethod}/>\n            <Todolist setCurrentMethod={setCurrentMethod} deleteTodoMethod={deleteTodoMethod} todos={todos} />  \n\n          </Card>\n        </Col>\n\n\n      </Row>\n    \n      </Content>\n      \n      <Footer align=\"right\" style={{ background:\"azure\",position:\"fixed\", bottom:\"0px\", width:\"100%\", color:\"#000\"}}>\n      My Todo App Â©2021 Created by Rishabh\n      </Footer>\n    </Layout>  \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}